version: '3.1'

services:
# BACKEND
  backend:
    container_name: backend_blog_react
    image: backend_blog_react
    restart: always
    build: ./
    ports:
      - "1111:4444"
    environment:
      - spring.datasource.url= jdbc:mysql://devopsMysqlDatabase:3306/blog?createDatabaseIfNotExist=true&autoReconnect=true&allowPublicKeyRetrieval=true&useSSL=false
    networks:
      - networkSpringReactMysql
    depends_on:
      - devopsMysqlDatabase
      - devopsPostgresqlDatabase  

# DATABASE (MYSQL)
  devopsMysqlDatabase:
    image: mysql:8.0
    ports:
      - "5555:3306"
    expose:
      - "3306"  
    networks:
      - networkSpringReactMysql
    environment:
      - MYSQL_USER= hamit
      - MYSQL_DATABASE= blog
      - MYSQL_ROOT_PASSWORD= root
      - MYSQL_PASSWORD= root
    restart: unless-stopped

# DATABASE (POSTGRESQL)
  devopsPostgresqlDatabase:
    image: postgres
    ports:
      - "6666:5432"
    expose:
      - "5432"  
    networks:
      - networkSpringReactMysql
    environment:
      - POSTGRES_PASSWORD= postgres
      - POSTGRES_USER= postgres
      - POSTGRES_DATABASE= blog
    restart: unless-stopped

# PROMETHEUS (localhost:3333)
  prometheus:
    image: prom/prometheus
    ports:
      - "3333:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - networkSpringReactMysql
    restart: unless-stopped   

# GRAFANA  (localhost:4444)
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "4444:3000"
    networks:
      - networkSpringReactMysql  
    restart: unless-stopped  

# NETWORKS
networks:
  networkSpringReactMysql:
    name: networkSpringReactMysql
    driver: bridge

# Dockerfile
# Docker Komut => Dockerfile build .
# Docker Komut => docker build -t my-prometheus .

# docker-compose --version
# docker-compose up
# docker-compose up -d
# docker-compose -f docker-compose-mysql.yml up
# docker-compose -f docker-compose-postgresql.yml up
# docker-compose down
# docker-compose restart
# docker-compose ps

# restart: parametresi farklı restart işlemlerinde kullanılır. 
# Bu parametre sayesinde servisler veya konteynarlar durduğunda ,
# sistem çöktüğünde serverin nasıl davrancağını belirtir.
# restart: no (default) ( yani docker compose otomatik olarak restart uygulasın
# restart: unless-stopped (  konteynar durduğunda otomatik olarak yeniden başlamasın
# restart: always (konteynar her zaman otomatik başlatsın)
# restart: on-failure  (konteynar çökmesi durumunda otomatik olarak başlat)

# docker network ls
# docker network inspect networkName

  # web:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/conf.d/default.conf
  #   depends_on:
  #     - app
  # app:
  #   image: php:7.4-fpm
  #   volumes:
  #     - .:/var/www/html
  #   depends_on:
  #     - db
  # db:
  #   image: mysql:5.7
  #   environment:
  #     MYSQL_ROOT_PASSWORD: root
  #     MYSQL_DATABASE: mydb
  #     MYSQL_USER: user
  #     MYSQL_PASSWORD: password
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #     - ./mysql:/var/lib/mysql
